"""
Django settings for djangoAPI project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-53pv!%9_*u(u+8pv^xj%8&5du&h8q_hm#h0_cz=nc@afw@&$3#"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
import sentry_sdk

sentry_sdk.init(
    dsn="https://7e463cac1b8430bd2568c512c049e25f@o4509162955472896.ingest.us.sentry.io/4509162958356480",
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

# SSL/TLS: Protocols that provide secure communication channels.
# HTTPS: Encrypts data in transit using SSL/TLS.

# Secure Sockets Layer, and TLS stands for Transport Layer Security
SECURE_SSL_REDIRECT = True  # Redirect all non-HTTPS requests to HTTPS
# Session expiration
SESSION_COOKIE_AGE = 1800  # 30 minutes

# Secure cookie flags
SESSION_COOKIE_SECURE = True        # Only send cookies over HTTPS
SESSION_COOKIE_HTTPONLY = True      # Prevent JS access to session cookies

# Enable CSRF protection
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True


# Cross-Origin Resource Sharing (CORS) is a critical functionality in web security, allowing or restricting web applications to interact with resources from domains other than their own.

# CORS defines a way for web servers to allow web applications running at different origins to access selected resources. When a client from origin example.com tries to access your API at api.mydomain.com, the server at api.mydomain.com must explicitly allow this interaction.

# Common Vulnerabilities
# Open CORS Policy: Allowing all origins unrestricted access can lead to data leakage and unauthorized access.
# Lack of CORS Preflight Checks: Not validating OPTIONS requests can allow malicious sites to skip CORS restrictions.

CORS_ALLOW_CREDENTIALS = True 

CORS_ALLOW_METHODS = [
    'GET',
    'POST',
]

CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',  
    'http://127.0.0.1:3000',  
    # 'http://localhost:8000',
]
# CORS_ORIGIN_WHITELIST='http://127.0.0.1:3000',
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_ALL_ORIGINS = False  # This should be False for stricter security


# Content security Policy
# A browser-side security layer that tells the browser what sources of scripts/styles are trusted.
# Letâ€™s say your frontend (served by Django or anywhere else) loads data from API and also includes untrusted JS or 3rd party scripts. If an attacker injects malicious JS into your site, CSP blocks it.


# XSS :XSS is when an attacker injects malicious JavaScript into a page that gets rendered to users.
# This mostly happens in web pages, not JSON APIs. But if your API accepts user-generated content (like comments, usernames), and a frontend displays it without escaping, then XSS can happen.

# CSP_DEFAULT_SRC = ("'self'",)
# CSP_SCRIPT_SRC = ("'none'",)
# CSP_STYLE_SRC = ("'self'",)

# CSP_REPORT_ONLY = True  # Set to False to enforce
# CSP_REPORT_URI = '/csp-report/'  # Django endpoint

# settings.py


# CONTENT_SECURITY_POLICY_REPORT_ONLY = {
#     "DIRECTIVES": {
#         "default-src": ("'self'",),
#         "script-src": ("'none'",),
#         "style-src": ("'self'",),
#         "report-uri": "/csp-report/"
#     }
# }
# CONTENT_SECURITY_POLICY_REPORT_ONLY = {
#     "DIRECTIVES": {
#         "default-src": ("'self'",),               # Allow content only from the same origin
#         # "script-src": ("'self'",),                # Allow scripts only from the same origin
#         "script-src":("'none'"),
#         "style-src": ("'self'",'unsafe-inline'),                 
#         "img-src": ("'self'",),                   # Allow images only from the same origin
#         "connect-src": ("'self'",),               # Allow AJAX requests only to the same origin
#         "font-src": ("'self'",),                  # Allow fonts only from the same origin
#         "object-src": ("'none'",),                # Disallow object (e.g., Flash)
#         "frame-src": ("'none'",),                 # Disallow framing (X-Frame-Options equivalent)
#         "base-uri": ("'none'",),                  # Disallow base URIs
#         "form-action": ("'self'",),               # Allow forms only to submit to the same origin
#         "frame-ancestors": ("'none'",),           # Prevent embedding in a frame
#         "report-uri": "/csp-report/"       
#     }
# }

# This ensures the current page can only interact with pages from the same origin,
# providing strong protection against cross-origin attacks (like Spectre).
# Required for enabling cross-origin isolation and using features like SharedArrayBuffer.
SECURE_CROSS_ORIGIN_OPENER_POLICY="same-origin"

# Same as above, but allows popups to stay connected (weaker isolation).
SECURE_CROSS_ORIGIN_OPENER_POLICY="same-origin-allow-popups"

#No protection. Risk of Spectre-style cross-origin leaks.
SECURE_CROSS_ORIGIN_OPENER_POLICY=None

# Only load cross-origin resources that explicitly allow it via CORP header.
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = "require-corp"

# No embedding restrictions. Not secure.
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY=None

# Cross-Origin-Resource-Policy (CORP)	
# "same-origin":Only allow same-origin pages to use this resource (like images, scripts).
# "same-site":Allow resources to be shared across subdomains of the same site.
# "cross-origin":Allow all origins to embed this resource. Least restrictive.

"""
The Referer HTTP header is an optional header field that identifies the URL of the web page that initiated a request. It essentially tells the server where the request came from, allowing the server to track the user's navigation path.
"""
# no-referrer: Never send the Referer header.
# same-origin: Send the Referrer header, but only on same-origin requests.
# strict-origin: Send the Referrer header to all origins, but only include the URL without the path (e.g., https://example.com/).
# strict-origin-when-cross-origin: Send the full Referrer header on same-origin requests and only the URL without the path on cross-origin requests. This is the default value.

SECURE_REFERRER_POLICY="no-referrer"

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'oauth2_provider',
    'django_prometheus',
    'csp',
    'corsheaders',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "API",
    "rest_framework",
    "rest_framework.authtoken",
    "sslserver",
    'django_extensions',
    'sri'
]

# The `XFrameOptionsMiddleware` is designed to protect your site from clickjacking attacks.
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', 
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_prometheus.middleware.PrometheusAfterMiddleware',
    'csp.middleware.CSPMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
]
AUTHENTICATION_BACKENDS = [
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
]
# Use admin login for OAuth
LOGIN_URL = '/admin/login/'
ROOT_URLCONF = "djangoAPI.urls"

LOGIN_REDIRECT_URL = "/"
OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
    },
    'PKCE_REQUIRED': False,  # Set to True for better security with PKCE
    'ACCESS_TOKEN_EXPIRE_SECONDS': 36000,
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,

}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'level': 'INFO',
#             'formatter': 'simpleFormatter',
#         },
#     },
#     'loggers': {
#         '': {  # Root logger (applies to all loggers if not overridden)
#             'handlers': ['console'],
#             'level': 'INFO',
#         },
#     },
#     'formatters': {
#         'simpleFormatter': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} [{name}:{lineno}] {module} - {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'my_app.log',  # Specify the path to your log file
            'maxBytes': 1024 * 1024 * 5,  # 5 MB - Maximum size of the log file before rotation
            'backupCount': 5,           # Keep up to 5 backup log files
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'my_app': {  # A specific logger for your application code (you can adjust the name)
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,  # Prevent messages from propagating to the root logger
        },
        'django': {  # Django's own logs
            'handlers': ['console'],
            'level': 'INFO',
        },
        '': {  # Root logger - handles anything not caught by specific loggers
            'handlers': ['console'],
            'level': 'WARNING',
        },
    },
}

OAUTHLIB_INSECURE_TRANSPORT = '1'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],

    'DEFAULT_THROTTLE_CLASSES': [
        # 'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.ScopedRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
         'user': '100/day',         # Authenticated users: 100 requests per day
        'user_create': '4/day',   # Scoped throttle for user creation
        'user_update': '5/day',   # Scoped throttle for update/delete
        'secure_api': '50/day',    # Scoped throttle for secure_api endpoint
    },
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}
# Rate Limiting: Limits the number of requests a client can make in a given time period.
# Throttling: Delays responses after a certain threshold of requests is reached.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
import os
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



WSGI_APPLICATION = "djangoAPI.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
